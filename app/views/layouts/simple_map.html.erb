<!DOCTYPE html>
<html>
  <head>
    <title>Chemical Dispersion Map - <%= content_for?(:title) ? yield(:title) : "Interactive Map" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta charset="utf-8">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin="" />
    
    <!-- Custom CSS for simple map -->
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        background-color: #f8f9fa;
      }
      
      .navbar-brand {
        font-weight: 600;
        color: #dc3545 !important;
      }
      
      .map-container {
        height: 80vh;
        width: 100%;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      
      .map-controls {
        background: white;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
      }
      
      .weather-popup {
        max-width: 250px;
      }
      
      .event-popup, .location-popup {
        max-width: 300px;
      }
      
      .card {
        border: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }
      
      .navbar {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }
    </style>
  </head>

  <body>
    <!-- Simple Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container-fluid">
        <%= link_to root_path, class: "navbar-brand" do %>
          <i class="fas fa-atom"></i> RailsDisp - Interactive Map
        <% end %>
        
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
          <span class="navbar-toggler-icon"></span>
        </button>
        
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav me-auto">
            <li class="nav-item">
              <%= link_to root_path, class: "nav-link" do %>
                <i class="fas fa-home"></i> Home
              <% end %>
            </li>
            <li class="nav-item">
              <%= link_to dashboard_path, class: "nav-link" do %>
                <i class="fas fa-tachometer-alt"></i> Full Dashboard
              <% end %>
            </li>
            <li class="nav-item">
              <%= link_to simple_map_path, class: "nav-link active" do %>
                <i class="fas fa-map"></i> Simple Map
              <% end %>
            </li>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                <i class="fas fa-database"></i> Data Management
              </a>
              <ul class="dropdown-menu">
                <li><%= link_to dispersion_events_path, class: "dropdown-item" do %>
                  <i class="fas fa-exclamation-triangle"></i> Dispersion Events
                <% end %></li>
                <li><%= link_to locations_path, class: "dropdown-item" do %>
                  <i class="fas fa-building"></i> Locations
                <% end %></li>
                <li><%= link_to chemicals_path, class: "dropdown-item" do %>
                  <i class="fas fa-flask"></i> Chemicals
                <% end %></li>
                <li><%= link_to weather_data_path, class: "dropdown-item" do %>
                  <i class="fas fa-cloud"></i> Weather Data
                <% end %></li>
              </ul>
            </li>
          </ul>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <main>
      <%= yield %>
    </main>

    <!-- Leaflet JavaScript -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>
    
    <!-- Bootstrap JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Simple Map JavaScript (no complex modules!) -->
    <script>
      // Simple Dashboard Map - Inline to avoid import conflicts
      console.log("üó∫Ô∏è Simple Dashboard Map: Loading (inline version)...");

      class SimpleDashboardMap {
        constructor() {
          this.map = null;
          this.markers = {};
          this.init();
        }

        init() {
          console.log("üöÄ SimpleDashboardMap: Initializing...");
          
          // Only initialize if we're on the dashboard page
          const mapContainer = document.getElementById('dispersionMap');
          if (!mapContainer) {
            console.log('üìç Not on dashboard page, skipping map initialization');
            return;
          }

          console.log('üó∫Ô∏è Initializing simple dashboard map...');
          this.createMap();
          this.loadInitialData();
        }

        createMap() {
          try {
            // Create the Leaflet map
            this.map = L.map('dispersionMap').setView([39.8283, -98.5795], 6); // Center of USA

            // Add OpenStreetMap tiles
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
              attribution: '¬© OpenStreetMap contributors',
              maxZoom: 18
            }).addTo(this.map);

            // Add click handler for weather data
            this.map.on('click', (e) => this.handleMapClick(e));

            console.log('‚úÖ Simple map created successfully');
          } catch (error) {
            console.error('‚ùå Error creating map:', error);
          }
        }

        async handleMapClick(e) {
          const { lat, lng } = e.latlng;
          console.log(`üå§Ô∏è Getting weather for coordinates: ${lat}, ${lng}`);

          try {
            // Add a temporary marker
            const tempMarker = L.marker([lat, lng])
              .addTo(this.map)
              .bindPopup('Loading weather data...')
              .openPopup();

            // Fetch weather data
            const response = await fetch(`/api/v1/weather/at_location?lat=${lat}&lng=${lng}`);
            const data = await response.json();

            if (response.ok && data.success) {
              // Update popup with weather data
              const weatherData = data.data;
              const popupContent = `
                <div class="weather-popup">
                  <h6><strong>Weather Data</strong></h6>
                  <p><strong>Location:</strong> ${lat.toFixed(4)}, ${lng.toFixed(4)}</p>
                  <p><strong>Temperature:</strong> ${weatherData.temperature}¬∞C</p>
                  <p><strong>Wind Speed:</strong> ${weatherData.wind_speed} m/s</p>
                  <p><strong>Wind Direction:</strong> ${weatherData.wind_direction}¬∞</p>
                  <p><strong>Humidity:</strong> ${weatherData.humidity}%</p>
                  <p><strong>Pressure:</strong> ${weatherData.pressure} hPa</p>
                  <small class="text-muted">Click elsewhere for more weather data</small>
                </div>
              `;
              
              tempMarker.setPopupContent(popupContent);
              console.log('‚úÖ Weather data loaded successfully');
            } else {
              tempMarker.setPopupContent(`
                <div class="error-popup">
                  <h6><strong>Weather Data</strong></h6>
                  <p>Error loading weather data</p>
                  <small>${data.message || 'Unknown error'}</small>
                </div>
              `);
            }
          } catch (error) {
            console.error('‚ùå Error fetching weather data:', error);
            // Handle error case for temp marker
          }
        }

        async loadInitialData() {
          try {
            // Load dispersion events
            const eventsResponse = await fetch('/api/v1/dispersion_events');
            if (eventsResponse.ok) {
              const eventData = await eventsResponse.json();
              if (eventData.success && eventData.data) {
                this.addDispersionEvents(eventData.data);
              }
            }

            // Load locations
            const locationsResponse = await fetch('/api/v1/locations');
            if (locationsResponse.ok) {
              const locationData = await locationsResponse.json();
              if (locationData.success && locationData.data && locationData.data.locations) {
                this.addLocations(locationData.data.locations);
              }
            }

            console.log('‚úÖ Initial data loaded');
          } catch (error) {
            console.error('‚ùå Error loading initial data:', error);
          }
        }

        addDispersionEvents(events) {
          events.forEach(event => {
            if (event.source_coordinates && event.source_coordinates.lat && event.source_coordinates.lng) {
              const marker = L.marker([event.source_coordinates.lat, event.source_coordinates.lng], {
                icon: L.divIcon({
                  className: 'dispersion-event-marker',
                  html: `
                    <div style="background: #dc3545; color: white; border-radius: 50%; width: 30px; height: 30px; 
                                display: flex; align-items: center; justify-content: center; font-size: 12px; 
                                border: 2px solid white; box-shadow: 0 2px 6px rgba(0,0,0,0.3);">
                      <i class="fas fa-exclamation"></i>
                    </div>
                  `,
                  iconSize: [30, 30],
                  iconAnchor: [15, 15]
                })
              }).addTo(this.map);

              marker.bindPopup(`
                <div class="event-popup">
                  <h6><strong>Dispersion Event #${event.id}</strong></h6>
                  <p><strong>Chemical:</strong> ${event.chemical || 'Unknown'}</p>
                  <p><strong>Location:</strong> ${event.location || 'Unknown'}</p>
                  <p><strong>Status:</strong> ${event.status || 'Active'}</p>
                  <div class="mt-2">
                    <a href="/dispersion_events/${event.id}" class="btn btn-sm btn-primary">View Details</a>
                  </div>
                </div>
              `);

              this.markers[`event_${event.id}`] = marker;
            }
          });
        }

        addLocations(locations) {
          locations.forEach(location => {
            const marker = L.marker([location.latitude, location.longitude], {
              icon: L.divIcon({
                className: 'location-marker',
                html: `
                  <div style="background: #28a745; color: white; border-radius: 3px; width: 25px; height: 25px; 
                              display: flex; align-items: center; justify-content: center; font-size: 10px; 
                              border: 2px solid white; box-shadow: 0 1px 3px rgba(0,0,0,0.3);">
                    <i class="fas fa-building"></i>
                  </div>
                `,
                iconSize: [25, 25],
                iconAnchor: [12, 12]
              })
            }).addTo(this.map);

            marker.bindPopup(`
              <div class="location-popup">
                <h6><strong>${location.name}</strong></h6>
                <p><strong>Type:</strong> ${location.terrain_type || 'Unknown'}</p>
                <p><strong>Coordinates:</strong> ${location.latitude}, ${location.longitude}</p>
                <div class="mt-2">
                  <a href="/locations/${location.id}" class="btn btn-sm btn-info">View Details</a>
                  <button class="btn btn-sm btn-success" onclick="window.location.href='/dispersion_events/new?location_id=${location.id}'">
                    New Event Here
                  </button>
                </div>
              </div>
            `);

            this.markers[`location_${location.id}`] = marker;
          });
        }
      }

      // Initialize when DOM is ready
      document.addEventListener('DOMContentLoaded', function() {
        // Only initialize if we're on dashboard page
        if (document.getElementById('dispersionMap')) {
          console.log('üöÄ Initializing Simple Dashboard Map...');
          window.simpleDashboardMap = new SimpleDashboardMap();
        }
      });
    </script>
    
    <!-- Page-specific scripts -->
    <%= yield :javascript %>
  </body>
</html>