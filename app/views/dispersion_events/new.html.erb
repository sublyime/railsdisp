<% content_for :title, "Create New Dispersion Event" %>

<div class="container mt-4">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h2>Create New Dispersion Event</h2>
        </div>
        <div class="card-body">
          <%= form_with model: @dispersion_event, local: true, class: "row g-3" do |form| %>
            <% if @dispersion_event.errors.any? %>
              <div class="col-12">
                <div class="alert alert-danger">
                  <h4><%= pluralize(@dispersion_event.errors.count, "error") %> prohibited this event from being saved:</h4>
                  <ul class="mb-0">
                    <% @dispersion_event.errors.full_messages.each do |message| %>
                      <li><%= message %></li>
                    <% end %>
                  </ul>
                </div>
              </div>
            <% end %>

            <!-- Chemical Selection -->
            <div class="col-md-6">
              <%= form.label :chemical_id, "Chemical", class: "form-label" %>
              <%= form.collection_select :chemical_id, Chemical.all, :id, :name, 
                    { prompt: "Select a chemical" }, 
                    { class: "form-select", required: true } %>
            </div>

            <!-- Location Selection -->
            <div class="col-md-6">
              <%= form.label :location_id, "Location", class: "form-label" %>
              <%= form.collection_select :location_id, Location.all, :id, :name, 
                    { prompt: "Select a location" }, 
                    { class: "form-select", required: true } %>
            </div>

            <!-- Release Parameters -->
            <div class="col-12">
              <h5 class="mt-3 mb-2">Release Parameters</h5>
            </div>

            <div class="col-md-4">
              <%= form.label :release_rate, "Release Rate (kg/s)", class: "form-label" %>
              <%= form.number_field :release_rate, step: 0.01, class: "form-control" %>
            </div>

            <div class="col-md-4">
              <%= form.label :release_volume, "Release Volume (mÂ³)", class: "form-label" %>
              <%= form.number_field :release_volume, step: 0.01, class: "form-control" %>
            </div>

            <div class="col-md-4">
              <%= form.label :release_mass, "Release Mass (kg)", class: "form-label" %>
              <%= form.number_field :release_mass, step: 0.01, class: "form-control" %>
            </div>

            <div class="col-md-6">
              <%= form.label :release_duration, "Release Duration (minutes)", class: "form-label" %>
              <%= form.number_field :release_duration, step: 0.1, class: "form-control" %>
            </div>

            <div class="col-md-6">
              <%= form.label :release_type, "Release Type", class: "form-label" %>
              <%= form.select :release_type, 
                    options_for_select([
                      ['Continuous', 'continuous'],
                      ['Instantaneous', 'instantaneous'],
                      ['Puff', 'puff']
                    ]), 
                    { prompt: "Select release type" }, 
                    { class: "form-select" } %>
            </div>

            <!-- Event Details -->
            <div class="col-12">
              <h5 class="mt-3 mb-2">Event Details</h5>
            </div>

            <div class="col-md-6">
              <%= form.label :started_at, "Start Time", class: "form-label" %>
              <%= form.datetime_local_field :started_at, class: "form-control" %>
            </div>

            <div class="col-md-6">
              <%= form.label :ended_at, "End Time", class: "form-label" %>
              <%= form.datetime_local_field :ended_at, class: "form-control" %>
            </div>

            <div class="col-md-6">
              <%= form.label :status, "Status", class: "form-label" %>
              <%= form.select :status,
                    options_for_select([
                      ['Planned', 'planned'],
                      ['Active', 'active'],
                      ['Completed', 'completed'],
                      ['Cancelled', 'cancelled']
                    ]),
                    { prompt: "Select status" },
                    { class: "form-select" } %>
            </div>

            <div class="col-12">
              <%= form.label :notes, "Notes", class: "form-label" %>
              <%= form.text_area :notes, rows: 3, class: "form-control", 
                    placeholder: "Additional notes about this dispersion event..." %>
            </div>

            <!-- Submit Buttons -->
            <div class="col-12">
              <div class="d-flex gap-2 mt-3">
                <%= form.submit "Create Dispersion Event", class: "btn btn-primary" %>
                <%= link_to "Cancel", dispersion_events_path, class: "btn btn-secondary" %>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Form validation
  (function() {
    'use strict';
    window.addEventListener('load', function() {
      var forms = document.getElementsByClassName('needs-validation');
      Array.prototype.filter.call(forms, function(form) {
        form.addEventListener('submit', function(event) {
          if (form.checkValidity() === false) {
            event.preventDefault();
            event.stopPropagation();
          }
          form.classList.add('was-validated');
        }, false);
      });
    }, false);
  })();

  // Auto-calculate end time based on duration
  document.addEventListener('DOMContentLoaded', function() {
    const durationField = document.getElementById('dispersion_event_release_duration');
    const startTimeField = document.getElementById('dispersion_event_started_at');
    const endTimeField = document.getElementById('dispersion_event_ended_at');
    
    function updateEndTime() {
      if (durationField && durationField.value && startTimeField && startTimeField.value) {
        const startTime = new Date(startTimeField.value);
        const duration = parseInt(durationField.value);
        const endTime = new Date(startTime.getTime() + (duration * 60 * 1000));
        
        if (endTimeField) {
          endTimeField.value = endTime.toISOString().slice(0, 16);
        }
      }
    }
    
    if (durationField && startTimeField && endTimeField) {
      durationField.addEventListener('input', updateEndTime);
      startTimeField.addEventListener('input', updateEndTime);
    }
  });
</script>
